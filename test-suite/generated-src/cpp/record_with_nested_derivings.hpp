// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from derivings.djinni

#ifndef DJINNI_GENERATED_RECORD_WITH_NESTED_DERIVINGS_HPP
#define DJINNI_GENERATED_RECORD_WITH_NESTED_DERIVINGS_HPP

#include "record_with_derivings.hpp"
#include <cstdint>
#include <iostream>
#include <utility>

namespace testsuite {

struct RecordWithNestedDerivings final {
    int32_t key;
    RecordWithDerivings rec;

    friend bool operator==(const RecordWithNestedDerivings& lhs, const RecordWithNestedDerivings& rhs);
    friend bool operator!=(const RecordWithNestedDerivings& lhs, const RecordWithNestedDerivings& rhs);

    friend bool operator<(const RecordWithNestedDerivings& lhs, const RecordWithNestedDerivings& rhs);
    friend bool operator>(const RecordWithNestedDerivings& lhs, const RecordWithNestedDerivings& rhs);

    friend bool operator<=(const RecordWithNestedDerivings& lhs, const RecordWithNestedDerivings& rhs);
    friend bool operator>=(const RecordWithNestedDerivings& lhs, const RecordWithNestedDerivings& rhs);

    RecordWithNestedDerivings(int32_t key_,
                              RecordWithDerivings rec_)
    : key(std::move(key_))
    , rec(std::move(rec_))
    {}

    RecordWithNestedDerivings(const RecordWithNestedDerivings& cpy) {
       this->key = cpy.key;
       this->rec = cpy.rec;
    }

    RecordWithNestedDerivings() = default;


    RecordWithNestedDerivings& operator=(const RecordWithNestedDerivings& cpy) {
       this->key = cpy.key;
       this->rec = cpy.rec;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(key, rec);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(key, rec);
    }
};

}  // namespace testsuite
#endif //DJINNI_GENERATED_RECORD_WITH_NESTED_DERIVINGS_HPP
