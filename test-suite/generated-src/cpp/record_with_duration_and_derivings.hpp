// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from duration.djinni

#ifndef DJINNI_GENERATED_RECORD_WITH_DURATION_AND_DERIVINGS_HPP
#define DJINNI_GENERATED_RECORD_WITH_DURATION_AND_DERIVINGS_HPP

#include <chrono>
#include <iostream>
#include <utility>

namespace testsuite {

struct RecordWithDurationAndDerivings final {
    std::chrono::duration<double, std::nano> dt;

    friend bool operator==(const RecordWithDurationAndDerivings& lhs, const RecordWithDurationAndDerivings& rhs);
    friend bool operator!=(const RecordWithDurationAndDerivings& lhs, const RecordWithDurationAndDerivings& rhs);

    friend bool operator<(const RecordWithDurationAndDerivings& lhs, const RecordWithDurationAndDerivings& rhs);
    friend bool operator>(const RecordWithDurationAndDerivings& lhs, const RecordWithDurationAndDerivings& rhs);

    friend bool operator<=(const RecordWithDurationAndDerivings& lhs, const RecordWithDurationAndDerivings& rhs);
    friend bool operator>=(const RecordWithDurationAndDerivings& lhs, const RecordWithDurationAndDerivings& rhs);

    RecordWithDurationAndDerivings(std::chrono::duration<double, std::nano> dt_)
    : dt(std::move(dt_))
    {}

    RecordWithDurationAndDerivings(const RecordWithDurationAndDerivings& cpy) {
       this->dt = cpy.dt;
    }

    RecordWithDurationAndDerivings() = default;


    RecordWithDurationAndDerivings& operator=(const RecordWithDurationAndDerivings& cpy) {
       this->dt = cpy.dt;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(dt);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(dt);
    }
};

}  // namespace testsuite
#endif //DJINNI_GENERATED_RECORD_WITH_DURATION_AND_DERIVINGS_HPP
