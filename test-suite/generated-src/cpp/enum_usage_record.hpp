// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#ifndef DJINNI_GENERATED_ENUM_USAGE_RECORD_HPP
#define DJINNI_GENERATED_ENUM_USAGE_RECORD_HPP

#include "../../handwritten-src/cpp/optional.hpp"
#include "color.hpp"
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

namespace testsuite {

struct EnumUsageRecord final {
    color e;
    std::experimental::optional<color> o;
    std::vector<color> l;
    std::unordered_set<color> s;
    std::unordered_map<color, color> m;

    EnumUsageRecord(color e_,
                    std::experimental::optional<color> o_,
                    std::vector<color> l_,
                    std::unordered_set<color> s_,
                    std::unordered_map<color, color> m_)
    : e(std::move(e_))
    , o(std::move(o_))
    , l(std::move(l_))
    , s(std::move(s_))
    , m(std::move(m_))
    {}

    EnumUsageRecord(const EnumUsageRecord& cpy) {
       this->e = cpy.e;
       this->o = cpy.o;
       this->l = cpy.l;
       this->s = cpy.s;
       this->m = cpy.m;
    }

    EnumUsageRecord() = default;


    EnumUsageRecord& operator=(const EnumUsageRecord& cpy) {
       this->e = cpy.e;
       this->o = cpy.o;
       this->l = cpy.l;
       this->s = cpy.s;
       this->m = cpy.m;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(e, o, l, s, m);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(e, o, l, s, m);
    }
};

}  // namespace testsuite
#endif //DJINNI_GENERATED_ENUM_USAGE_RECORD_HPP
