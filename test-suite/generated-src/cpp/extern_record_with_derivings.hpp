// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from yaml-test.djinni

#ifndef DJINNI_GENERATED_EXTERN_RECORD_WITH_DERIVINGS_HPP
#define DJINNI_GENERATED_EXTERN_RECORD_WITH_DERIVINGS_HPP

#include "color.hpp"
#include "record_with_derivings.hpp"
#include <iostream>
#include <utility>

/** This file tests YAML dumped by Djinni can be parsed back in */
struct ExternRecordWithDerivings final {
    ::testsuite::RecordWithDerivings member;
    ::testsuite::color e;

    friend bool operator==(const ExternRecordWithDerivings& lhs, const ExternRecordWithDerivings& rhs);
    friend bool operator!=(const ExternRecordWithDerivings& lhs, const ExternRecordWithDerivings& rhs);

    friend bool operator<(const ExternRecordWithDerivings& lhs, const ExternRecordWithDerivings& rhs);
    friend bool operator>(const ExternRecordWithDerivings& lhs, const ExternRecordWithDerivings& rhs);

    friend bool operator<=(const ExternRecordWithDerivings& lhs, const ExternRecordWithDerivings& rhs);
    friend bool operator>=(const ExternRecordWithDerivings& lhs, const ExternRecordWithDerivings& rhs);

    ExternRecordWithDerivings(::testsuite::RecordWithDerivings member_,
                              ::testsuite::color e_)
    : member(std::move(member_))
    , e(std::move(e_))
    {}

    ExternRecordWithDerivings(const ExternRecordWithDerivings& cpy) {
       this->member = cpy.member;
       this->e = cpy.e;
    }

    ExternRecordWithDerivings() = default;


    ExternRecordWithDerivings& operator=(const ExternRecordWithDerivings& cpy) {
       this->member = cpy.member;
       this->e = cpy.e;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(member, e);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(member, e);
    }
};
#endif //DJINNI_GENERATED_EXTERN_RECORD_WITH_DERIVINGS_HPP
